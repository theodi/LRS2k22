<%- include('../partials/header') %>
<link rel="stylesheet" type="text/css" href="//cdn.datatables.net/1.12.1/css/jquery.dataTables.css">
<link rel="stylesheet" type="text/css" href="//cdn.datatables.net/responsive/2.3.0/css/responsive.dataTables.min.css">
<script type="text/javascript" charset="utf8" src="//cdn.datatables.net/1.12.1/js/jquery.dataTables.min.js"></script>
<script type="text/javascript" charset="utf8" src="//cdn.datatables.net/responsive/2.3.0/js/dataTables.responsive.min.js"></script>
<script type="text/javascript" charset="utf8" src="//cdn.datatables.net/buttons/2.2.3/js/dataTables.buttons.min.js"></script>
<script type="text/javascript" charset="utf8" src="//cdn.datatables.net/buttons/2.2.3/js/buttons.colVis.min.js"></script>

<div class="container box">
    <div class="jumbotron text-primary" style="padding: 1em; line-height: 1.5em;">
        <h1 id="main-title"><span class="fa fa-lock"></span>Loading...</h1>
        <div style="text-align: left">
            <subtitle id="description">
            </subtitle>
            <h2>Course overview</h2>
            <table id="course-factbox">

            </table>
            <h2>XAPI Config</h2>
            <table id="xapi-factbox">

            </table>
            <h2>Module overview</h2>
            <table id="factbox">

            </table>
            <h2>Section titles</h2>
            <table id="section_titles">
                <thead>
                  <tr>
                    <th>Block #</th>
                    <th>Type</th>
                    <th>Title</th>
                    <th># words</th>
                  </tr>
                </thead>
                <tbody id="section_table_body">
        
                </tbody>
            </table>
            <h2>Extensions</h2>
            <table id="extensions-factbox">
                <thead>
                  <tr>
                    <th>Extension</th>
                    <th>Version</th>
                  </tr>
                </thead>
                <tbody id="extensions_table_body">
        
                </tbody>
            </table>
        </div>
    </div>
</div>
<script>
    function removeHTML(str){ 
        var tmp = document.createElement("DIV");
        tmp.innerHTML = str;
        return tmp.textContent || tmp.innerText || "";
    }
   function addRowToTable(id,key,value,link) {
    var tr = document.createElement('tr');
    var td1 = document.createElement('td');
    var td2 = document.createElement('td');
    td1.innerHTML = key;
    if (link) {
        var anchor = document.createElement("a");
        anchor.setAttribute("href",link);
        anchor.setAttribute("target","_blank");
        anchor.innerHTML = value;
        td2.append(anchor);
    } else {
        td2.innerHTML = value;
    }
    tr.append(td1);
    tr.append(td2);
    document.getElementById(id).append(tr);
   }
   function addExtensionDataToTable(id,data) {
    var row = document.createElement('tr');
    var name = document.createElement('td');
    var version = document.createElement('td');
    name.innerHTML = data.name;
    version.innerHTML = data.version;
    row.append(name);
    row.append(version);
    document.getElementById(id).append(row);
   }
   function addDataToTable(id,data) {
    var row = document.createElement('tr');
    var number = document.createElement('td')
    var icon = document.createElement('td')
    var title = document.createElement('td')
    var words = document.createElement('td');
    if (data.isQuestion && data.activityID) {
        var a = document.createElement("a");
        a.setAttribute("href","/questionSummary?activity="+data.activityID+"%23/id/"+data.id);
        a.setAttribute("target","_blank");
        a.innerHTML = data.title;
        title.append(a);
    } else {
        title.innerHTML = data.title;
    }
    number.innerHTML = data.count;
    var img = document.createElement('img');
    img.setAttribute("src","/images/component-icons/icon-"+data.type+".png");
    img.setAttribute("onerror","this.onerror=null;this.src='/images/component-icons/icon-default.png'")
    img.setAttribute("alt",data.type);
    icon.append(img);
    var p = document.createElement("span");
    p.style.paddingLeft = "10px";
    p.innerHTML = data.type;
    icon.append(p);
    words.innerHTML = data.wordCount;
    row.append(number);
    row.append(icon);
    row.append(title);
    row.append(words);
    document.getElementById(id).append(row);
   }
   $(document).ready( function () {
        var activityID = null;
        var isXAPI = false;
        $.get('/api/contentObject/<%= id %>/config', function(data) {
            addRowToTable("course-factbox","ID",data._id);
            if (data._themePreset) {
                addRowToTable("course-factbox","Theme",data._themePreset.parentTheme);
                addRowToTable("course-factbox","Theme Preset",data._themePreset.displayName);
            } else {
                addRowToTable("course-factbox","Theme",data._theme);
            }
            if (data._extensions._xapi) {
                if (!data._extensions._xapi || data._extensions._xapi._isEnabled == "false") {
                    addRowToTable("xapi-factbox","Enabled","false");
                } else {
                    isXAPI = true;
                    addRowToTable("xapi-factbox","Enabled","true");
                    addRowToTable("xapi-factbox","Activity ID",data._extensions._xapi._activityID);
                    activityID = data._extensions._xapi._activityID;
                    addRowToTable("xapi-factbox","Endpoint",data._extensions._xapi._endpoint);
                }
            }
            for (const [key, value] of Object.entries(data._enabledExtensions)) {
               addExtensionDataToTable("extensions_table_body",value); 
            }
        });
        $.get('/api/contentObject/<%= id %>', function(data) {
            if (isXAPI) {
                var dashboardLink = "/course/"+data.id+"/dashboard";
                addRowToTable("xapi-factbox","Dashboard","View XAPI Dashboard",dashboardLink);
            }
            var count = 1;
            var totalAssessmentWeight = 0;
            document.getElementById("main-title").innerHTML = data.title;
            addRowToTable("factbox","ID",data.id);
            addRowToTable("factbox","# articles",data.articleCount);
            addRowToTable("factbox","# blocks",data.blockCount);
            addRowToTable("factbox","# asessments",data.assessmentCount);
            addRowToTable("factbox","# questions",data.questionCount);
            addRowToTable("factbox","# words",data.wordCount,"/course/"+data.id+"/transcript");
            document.getElementById("description").innerHTML = data.description;
            //Sort the articles here
            delete(data.articles.length);
            var articles = Object.keys(data.articles).map((key) => data.articles[key]);
            articles = articles.sort((a, b) => {
                if (a.sortOrder < b.sortOrder) {
                    return -1;
                }
            });
            for (var i=0;i<articles.length;i++) {
                var article = articles[i];
                var local = {};
                local.type = "article";
                local.title = article.title;
                if (article.assessmentID) {
                    totalAssessmentWeight += article.assessmentWeight;
                    local.title += " <br/><b>AssessmentID</b>: " + article.assessmentID + "<br/><b>Weight</b>: " + article.assessmentWeight;
                }
                local.isQuestion = false;
                local.activityID = activityID;
                local.id = article.id;
                local.wordCount = "-";
                local.count = "Article-" + i;
                addDataToTable("section_table_body",local);
                blocks = article.blocks;
                delete(blocks.length);
                var blocks = Object.keys(blocks).map((key) => blocks[key]);
                blocks = blocks.sort((a, b) => {
                    if (a.sortOrder < b.sortOrder) {
                        return -1;
                    }
                });
//                if (typeof value == "object") {
//                    if (value.title.trim() != "") {
                        //addTitleToList("section_titles",value.title.trim());
//                    }
                    //for (const [bkey, bvalue] of Object.entries(article.blocks)) {
                    for (var b=0;b<blocks.length;b++) {
                        bvalue = blocks[b];
                        var local = {};
                        local.type = "";
                        local.title = "";
                        local.isQuestion = false;
                        local.activityID = activityID;
                        if (typeof bvalue == "object") {
                            local.wordCount = bvalue.wordCount;
                            if (bvalue.title.trim() != "" && bvalue.title.trim().toLowerCase() != "block title") {
                                local.title = bvalue.title.trim();
                            }
                            for (const [ckey, cvalue] of Object.entries(bvalue.components)) {
                                if (typeof cvalue == "object") {
                                    local.wordCount += cvalue.wordCount;
                                    if (local.type != "" && local.type.trim() == "graphic" && cvalue.type.trim() != "graphic") {
                                      local.type = cvalue.type;
                                      local.isQuestion = cvalue.isQuestion;
                                      local.id = cvalue.id;
                                    } else if (local.type == "") {
                                      local.type = cvalue.type;
                                      local.isQuestion = cvalue.isQuestion;
                                      local.id = cvalue.id;
                                    }
                                    if (cvalue.title.trim() != "" && local.title == "" && cvalue.title.trim().toLowerCase() != "component title") {
                                        local.title = cvalue.title.trim();
                                    }
                                }
                            }
                        }
                        if (local.type != "" && local.title !="") {
                            local.count = count;
                            addDataToTable("section_table_body",local);
                            count += 1;
                        } else if (local.title != "") {
                            local.count = count;
                            local.type = "default";
                            addDataToTable("section_table_body",local);
                            count += 1;
                        }
                    }   
                //}
            }
            addRowToTable("factbox","total assessmentWeight",totalAssessmentWeight);
        });
    });
</script>
<%- include('../partials/footer') %>