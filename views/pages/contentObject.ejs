<%- include('../partials/header') %>
    <link rel="stylesheet" type="text/css" href="//cdn.datatables.net/1.12.1/css/jquery.dataTables.css">
    <link rel="stylesheet" type="text/css"
        href="//cdn.datatables.net/responsive/2.3.0/css/responsive.dataTables.min.css">
    <script type="text/javascript" charset="utf8"
        src="//cdn.datatables.net/1.12.1/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" charset="utf8"
        src="//cdn.datatables.net/responsive/2.3.0/js/dataTables.responsive.min.js"></script>
    <script type="text/javascript" charset="utf8"
        src="//cdn.datatables.net/buttons/2.2.3/js/dataTables.buttons.min.js"></script>
    <script type="text/javascript" charset="utf8"
        src="//cdn.datatables.net/buttons/2.2.3/js/buttons.colVis.min.js"></script>

    <div class="container box">
        <div class="jumbotron text-primary" style="padding: 1em; line-height: 1.5em;">
            <h1 id="main-title"><span class="fa fa-lock"></span>Loading...</h1>
            <div style="text-align: left">
                <subtitle id="description">
                </subtitle>
                <h2>Course overview</h2>
                <table id="course-factbox">

                </table>
                <h2>Tracking Config</h2>
                <table id="xapi-factbox">

                </table>
                <button type="button" onclick="resetProgress()">Reset block/component progress bar tracking</button>
                <div id="resetMessageBanner" style="text-align: center; width:100%; color:red;"></div>
                <h2>Packages</h2>

                <!-- Display latest and previous versions here -->
                <div class="package-sections">
                    <!-- Build Package Section -->
                    <div class="package-section">
                        <h3>Build Packages</h3>
                        <table>
                            <thead>
                                <th>Version</th>
                                <th>Timestamp</th>
                                <td>Download</td>
                                <td>Delete</td>
                            </thead>
                            <tbody id="build-packages">

                            </tbody>
                            <!-- Display Build packages here -->
                        </table>
                        <input type="file" id="buildFileInput" accept=".zip">
                        <button type="button" onclick="uploadPackage('build')">Upload</button>
                    </div>
                    <!-- Source Package Section -->
                    <div class="package-section">
                        <h3>Source Packages</h3>
                        <table>
                            <thead>
                                <th>Version</th>
                                <th>Timestamp</th>
                                <td>Download</td>
                                <td>Delete</td>
                            </thead>
                            <tbody id="source-packages">

                            </tbody>
                            <!-- Display Source packages here -->
                        </table>
                        <!-- Display source packages here -->
                        <input type="file" id="sourceFileInput" accept=".zip">
                        <button type="button" onclick="uploadPackage('source')">Upload</button>
                    </div>
                </div>
                <div id="messageBanner" style="text-align: center; width:100%; color:red;"></div>
                <h2>Module overview</h2>
                <table id="factbox">

                </table>
                <h2>Section titles</h2>
                <table id="section_titles">
                    <thead>
                        <tr>
                            <th>Block #</th>
                            <th>Type</th>
                            <th>Title</th>
                            <th>Edit</th>
                            <th>Set block title</th>
                            <th># words</th>
                        </tr>
                    </thead>
                    <tbody id="section_table_body">

                    </tbody>
                </table>
                <h2>Extensions</h2>
                <table id="extensions-factbox">
                    <thead>
                        <tr>
                            <th>Extension</th>
                            <th>Version</th>
                        </tr>
                    </thead>
                    <tbody id="extensions_table_body">

                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <script>

        let courseData = {};
        let objectData = {};
        let courseId = "";
        const contentObjectId = "<%= id %>";

        async function loadData() {
            try {
                objectData = await getContentObjectData();
                courseId = objectData._courseId;

                courseData = await getCourseData();

                // Trigger the document ready event when data is loaded
                $(document).ready(handleDocumentReady);
            } catch (error) {
                console.error('Error loading course data:', error);
                // Handle error appropriately
            }
        }

        async function getCourseData() {
            return new Promise((resolve, reject) => {
                $.get('/api/course/'+courseId+'/config', function (data) {
                    resolve(data);
                }).fail(function (error) {
                    console.log(error);
                    reject(error);
                });
            });
        }

        async function getContentObjectData() {
            return new Promise((resolve, reject) => {
                $.get('/api/contentObject/<%= id %>', function (data) {
                    resolve(data);
                }).fail(function (error) {
                    reject(error);
                });
            });
        }

       // Function to handle resetting of progress bar to use block titles
        async function setBlockTitle(event, id, title, displayTitle) {
            event.preventDefault(); // Prevent the default navigation behavior
            var toUpdate = { "title": title, "displayTitle": "" }
            try {
                // Make a POST request to update the block title
                const response = await fetch(`/api/blocks/${id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json' // Set the content type to JSON
                },
                body: JSON.stringify(toUpdate) // Convert toUpdate to JSON and include it in the request body
                });

                if (response.status === 304) {
                // Handle the case where the server returns a 304 status (Not Modified)
                displayMessage('Not Modified', 'info', "setBlockTitle_" + id);
                } else if (response.ok) {
                    response.json().then((data) => {
                        // Display a success message from the server
                        displayMessage(data.message, 'success', "setBlockTitle_" + id);
                        // Optionally, update the UI or perform additional actions
                    });
                } else {
                    // Handle the case where the update fails
                    response.json().then((data) => {
                        displayMessage(data.error, 'error', "setBlockTitle_" + id);
                    });
                }
            } catch (error) {
                // Handle any network or server errors
                console.error('Error updating object:', error);
                displayMessage('Failed', 'error', "setBlockTitle_" + id);
            }
        }


        // Function to handle resetting of progress bar to use block titles
        async function resetProgress() {
            try {
                // Make a POST request to reset page-level progress
                const response = await fetch(`/course/` + courseId + `/resetPageLevelProgress`, {
                    method: 'POST',
                });

                if (response.ok) {
                    // Reset was successful
                    response.json().then((data) => {
                        // Display a success message from the server
                        displayMessage(data.message, 'success', "resetMessageBanner");
                        // Optionally, update the UI or perform additional actions
                    });
                } else {
                    // Handle the case where the reset fails
                    response.json().then((data) => {
                        displayMessage('Page-level progress reset failed: ' + data.error, 'error', "resetMessageBanner");
                    });
                }
            } catch (error) {
                // Handle any network or server errors
                console.error('Error resetting page-level progress:', error);
                displayMessage('An error occurred while resetting page-level progress.', 'error', "resetMessageBanner");
            }
        }

        async function uploadPackage(packageType) {
            const inputElement = document.getElementById(`${packageType}FileInput`);
            const file = inputElement.files[0];
            inputElement.value = '';

            if (!file) {
                // Handle the case where no file is selected
                displayMessage('Please select a file.', 'error', "messageBanner");
                return;
            }

            // Create a FormData object to send the file
            const formData = new FormData();
            formData.append(packageType, file);

            try {
                // Make a POST request to upload the package
                const response = await fetch(`/course/`+contentObjectId+`/packages/upload/`, {
                    method: 'POST',
                    body: formData,
                });

                if (response.ok) {
                    // Display a success message
                    displayMessage(`Package (${packageType}) uploaded successfully.`, 'success', "messageBanner");
                    displayPackages();

                    // Optionally, update the relevant section to show the uploaded file
                } else {
                    // Handle the case where the upload fails
                    response.json().then((data) => {
                        displayMessage('Package upload failed: ' + data.error, 'error', "messageBanner");
                    });
                }
            } catch (error) {
                // Handle any network or server errors
                console.error('Error uploading package:', error);
                displayMessage('An error occurred while uploading the package.', 'error', "messageBanner");
            }
        }

        async function deletePackage(deleteUrl) {
            try {
                // Send a DELETE request to delete the package
                const response = await fetch(deleteUrl, {
                    method: 'DELETE',
                });

                if (response.ok) {
                    displayMessage('Package deleted successfully', 'success', "messageBanner");
                    // Call the displayPackages() function to update the package list
                    displayPackages();
                } else {
                    displayMessage('Error deleting package:', response.statusText, "messageBanner");
                }
            } catch (error) {
                displayMessage('Error deleting package: ' + error, 'error', "messageBanner");
            }
        }

        // Function to get and display the list of packages
        async function displayPackages() {

            try {
                // Make a GET request to fetch the list of build packages
                const buildResponse = await fetch(`/course/${contentObjectId}/packages/build`, {
                    method: 'GET',
                });

                // Make a GET request to fetch the list of source packages
                const sourceResponse = await fetch(`/course/${contentObjectId}/packages/source`, {
                    method: 'GET',
                });

                if (buildResponse.ok && sourceResponse.ok) {
                    const buildData = await buildResponse.json();
                    const sourceData = await sourceResponse.json();

                    // Display BUILD packages
                    displayPackageSection(buildData.packages, contentObjectId, 'build');

                    // Display source packages
                    displayPackageSection(sourceData.packages, contentObjectId, 'source');
                } else {
                    displayMessage('Error fetching packages', 'error', "messageBanner");
                }
            } catch (error) {
                console.error('Error fetching packages:', error);
                displayMessage('<p>An error occurred while fetching packages.</p>', 'error', "messageBanner");
            }
        }

        // Function to display a package section
        function displayPackageSection(packages, contentObjectId, packageType) {
            let html = '';
            var count = 0;
            packages.forEach((packageFileName) => {
                const packageDateTime = new Date(parseInt(packageFileName.split('-')[1], 10));
                const formattedDateTime = packageDateTime.toLocaleString();

                const downloadLink = `/course/${contentObjectId}/packages/${packageType}/${packageFileName}`;
                const deleteLink = `/course/${contentObjectId}/packages/delete/${packageType}/${packageFileName}`;
                const latestLink = `/course/${contentObjectId}/packages/${packageType}/latest`;

                if (count == 0) {
                    countText = '<a href="' + latestLink + '">latest</a>';
                } else {
                    countText = count;
                }
                html += `
                    <tr class="package-entry">
                        <td>${countText}</td>
                        <td>${formattedDateTime}</td>
                        <td><a href="${downloadLink}" target="_blank">Download</a></td>
                        <td><a href="#" onclick="deletePackage('${deleteLink}')">Delete</a></td>
                    </tr>
                    `;
                count = count - 1;
            });
            const packagesSection = document.getElementById(packageType + "-packages");
            packagesSection.innerHTML = html;
        }

        // Function to display a message banner
        function displayMessage(message, messageType, element) {
            const messageBanner = document.getElementById(element);
            messageBanner.innerHTML = message;
            messageBanner.className = messageType;
            setTimeout(() => {
                messageBanner.innerHTML = '';
                messageBanner.className = '';
            }, 10000); // Clear the message after 5 seconds
        }

        function removeHTML(str) {
            var tmp = document.createElement("DIV");
            tmp.innerHTML = str;
            return tmp.textContent || tmp.innerText || "";
        }

        function addRowToTable(id, key, value, link) {
            var tr = document.createElement('tr');
            var td1 = document.createElement('td');
            var td2 = document.createElement('td');
            td1.innerHTML = key;
            if (link) {
                var anchor = document.createElement("a");
                anchor.setAttribute("href", link);
                anchor.setAttribute("target", "_blank");
                anchor.innerHTML = value;
                td2.append(anchor);
            } else {
                td2.innerHTML = value;
            }
            tr.append(td1);
            tr.append(td2);
            document.getElementById(id).append(tr);
        }

        function addExtensionDataToTable(id, data) {
            var row = document.createElement('tr');
            var name = document.createElement('td');
            var version = document.createElement('td');
            name.innerHTML = data.name;
            version.innerHTML = data.version;
            row.append(name);
            row.append(version);
            document.getElementById(id).append(row);
        }

        function addDataToTable(id, data) {
            var row = document.createElement('tr');
            var number = document.createElement('td');
            var icon = document.createElement('td');
            var title = document.createElement('td');
            var words = document.createElement('td');
            var editLink = document.createElement('td');
            var setBlockTitle = document.createElement('td');
            if (data.isQuestion && data.activityID) {
                var a = document.createElement("a");
                a.setAttribute("href", "/questionSummary?activity=" + data.activityID + "%23/id/" + data.id);
                a.setAttribute("target", "_blank");
                a.innerHTML = data.title;
                title.append(a);
            } else {
                title.innerHTML = data.title;
            }
            var editType = "component";
            if (data.type == "article") {
                editType = "article";
            }
            var aatEditLink = "<%= aatBase %>#editor/" + courseId + "/"+editType+"/" + data.id + "/edit";
            editLink.innerHTML = '<a href="'+aatEditLink+'" target="_blank">edit</a>';
            if (data.blockId && data.canSetTitle) {
                setBlockTitle.innerHTML = '<span id="setBlockTitle_' + data.blockId + '"><a href="#" onClick="setBlockTitle(event, \'' + data.blockId + '\', \'' + data.title + '\')">Set block title</a></span>';
            }
            number.innerHTML = data.count;
            var img = document.createElement('img');
            img.setAttribute("src", "/images/component-icons/icon-" + data.type + ".png");
            img.setAttribute("onerror", "this.onerror=null;this.src='/images/component-icons/icon-default.png'")
            img.setAttribute("alt", data.type);
            icon.append(img);
            var p = document.createElement("span");
            p.style.paddingLeft = "10px";
            p.innerHTML = data.type;
            icon.append(p);
            words.innerHTML = data.wordCount;
            row.append(number);
            row.append(icon);
            row.append(title);
            row.append(editLink);
            row.append(setBlockTitle);
            row.append(words);
            document.getElementById(id).append(row);
        }

        function handleDocumentReady() {
            var activityID = null;
            var isXAPI = false;

            displayPackages();
            addRowToTable("course-factbox", "ID", courseData._courseId);
            if (courseData._themePreset) {
                addRowToTable("course-factbox", "Theme", courseData._themePreset.parentTheme);
                addRowToTable("course-factbox", "Theme Preset", courseData._themePreset.displayName);
            } else {
                addRowToTable("course-factbox", "Theme", courseData._theme);
            }
            if (courseData._completionCriteria) {
                addRowToTable("course-factbox", "Require content completed", courseData._completionCriteria._requireContentCompleted);
                addRowToTable("course-factbox", "Require assessment completed", courseData._completionCriteria._requireAssessmentCompleted);
            }
            if (courseData._extensions) {
                if (courseData._extensions._xapi) {
                    addRowToTable("xapi-factbox", "Type", "XAPI");
                    if (!courseData._extensions._xapi || courseData._extensions._xapi._isEnabled == "false") {
                        addRowToTable("xapi-factbox", "Enabled", "false");
                    } else {
                        isXAPI = true;
                        addRowToTable("xapi-factbox", "Enabled", "true");
                        addRowToTable("xapi-factbox", "Activity ID", courseData._extensions._xapi._activityID);
                        activityID = courseData._extensions._xapi._activityID;
                        addRowToTable("xapi-factbox", "Endpoint", courseData._extensions._xapi._endpoint);
                    }
                }
                if (courseData._extensions._spoor) {
                    addRowToTable("xapi-factbox", "Type", "SCORM");
                    spoor = courseData._extensions._spoor;
                    addRowToTable("xapi-factbox", "Enabled", spoor._isEnabled);
                    addRowToTable("xapi-factbox", "on training criteria met", spoor._reporting._onTrackingCriteriaMet);
                    addRowToTable("xapi-factbox", "on assessment failure", spoor._reporting._onAssessmentFailure);
                }
            }
            for (const [key, value] of Object.entries(courseData._enabledExtensions)) {
                addExtensionDataToTable("extensions_table_body", value);
            }
            if (isXAPI) {
                var dashboardLink = "/course/" + objectData._id + "/dashboard";
                addRowToTable("xapi-factbox", "Dashboard", "View XAPI Dashboard", dashboardLink);
            }
            var count = 1;
            var totalAssessmentWeight = 0;
            document.getElementById("main-title").innerHTML = objectData.title;
            var aatEditLink = "<%= aatBase %>#editor/" + courseId + "/page/" + objectData._id;
            addRowToTable("factbox", "ID", objectData._id, aatEditLink);
            addRowToTable("factbox", "# articles", objectData.articles.length);
            addRowToTable("factbox", "# blocks", objectData.totalBlockCount);
            addRowToTable("factbox", "# asessments", objectData.assessmentCount);
            addRowToTable("factbox", "# questions", objectData.questionCount);
            addRowToTable("factbox", "# words", objectData.wordCount, "/course/" + objectData._id + "/transcript");
            document.getElementById("description").innerHTML = objectData.body;
            //Sort the articles here
            var articles = Object.keys(objectData.articles).map((key) => objectData.articles[key]);
            for (var i = 0; i < articles.length; i++) {
                var article = articles[i];
                var local = {};
                local.type = "article";
                local.title = article.title;
                if (article._extensions && article._extensions._assessment && article._extensions._assessment._isEnabled === true) {
                    totalAssessmentWeight += article._extensions._assessment._assessmentWeight;
                    local.title += "<table><tr><td style='vertical-align: middle;'>";
                    local.title += "<b>AssessmentID</b>: " + article._extensions._assessment._id + "<br/>";
                    local.title += "<b>Weight</b>: " + article._extensions._assessment._assessmentWeight + "<br/>";
                    local.title += "<b>Attempts allowed:</b> " + article._extensions._assessment._attempts + "<br/>";
                    local.title += "</td><td style='vertical-align: middle;'>";
                    local.title += "<b>Reset Type:</b> " + article._extensions._assessment._questions._resetType + "<br/>";
                    local.title += "<b>Can show feedback:</b> " + article._extensions._assessment._questions._canShowFeedback + "<br/>";
                    local.title += "<b>Can show marking:</b> " + article._extensions._assessment._questions._canShowMarking + "<br/>";
                    local.title += "<b>Can show model answer:</b> " + article._extensions._assessment._questions._canShowModelAnswer + "<br/>";
                    local.title += "</td></tr></table>";
                }
                local.isQuestion = false;
                local.activityID = activityID;
                local.id = article._id;
                local.wordCount = "-";
                local.count = "Article-" + i;
                addDataToTable("section_table_body", local);
                blocks = article.blocks;
                var blocks = Object.keys(blocks).map((key) => blocks[key]);
                for (var b = 0; b < blocks.length; b++) {
                    block = blocks[b];
                    var local = {};
                    local.type = "";
                    local.title = "";
                    local.count = b;
                    local.isQuestion = false;
                    local.activityID = activityID;
                    local.wordCount = block.wordCount;
                    local.blockId = block._id;
                    components = block.components;
                    local.canSetTitle = false;
                    if (block.displayTitle.trim() == "") {
                        local.canSetTitle = true;
                    }
                    let primaryComponent;
                    if (components.length === 1) {
                        // If there's only one component, it's the primary component
                        primaryComponent = components[0];
                    } else {
                        // Check for a component with .properties._feedback
                        const feedbackComponent = components.find(component => component.properties && component.properties._feedback);
                        if (feedbackComponent) {
                            primaryComponent = feedbackComponent;
                        } else {
                            // Find the first component that is not "graphic"
                            const nonGraphicComponent = components.find(component => component._component !== "graphic");
                            if (nonGraphicComponent) {
                               primaryComponent = nonGraphicComponent;
                            } else {
                                // If none of the above conditions are met, the first component is the primary component
                                primaryComponent = components[0];
                            }
                        }
                    }
                    local.type = primaryComponent._component;
                    local.isQuestion = primaryComponent.isQuestion;
                    local.id = primaryComponent._id;
                    if (primaryComponent.displayTitle.trim() != "" && local.title == "" && primaryComponent.displayTitle.trim().toLowerCase() != "component title") {
                        local.title = primaryComponent.displayTitle.trim();
                    } else {
                        local.title = block.displayTitle.trim();
                    }
                    if (local.type != "" && local.title != "") {
                        addDataToTable("section_table_body", local);
                    } else if (local.title != "") {
                        local.type = "default";
                        addDataToTable("section_table_body", local);
                    }
                }
                //}
            }
            addRowToTable("factbox", "total assessmentWeight", totalAssessmentWeight);
        }
        loadData();
    </script>
    <%- include('../partials/footer') %>
