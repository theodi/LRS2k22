<%- include('../partials/header') %>
<link rel="stylesheet" type="text/css" href="//cdn.datatables.net/1.12.1/css/jquery.dataTables.css">
<link rel="stylesheet" type="text/css" href="//cdn.datatables.net/responsive/2.3.0/css/responsive.dataTables.min.css">
<script type="text/javascript" charset="utf8" src="//cdn.datatables.net/1.12.1/js/jquery.dataTables.min.js"></script>
<script type="text/javascript" charset="utf8" src="//cdn.datatables.net/responsive/2.3.0/js/dataTables.responsive.min.js"></script>
<script type="text/javascript" charset="utf8" src="//cdn.datatables.net/buttons/2.2.3/js/dataTables.buttons.min.js"></script>
<script type="text/javascript" charset="utf8" src="//cdn.datatables.net/buttons/2.2.3/js/buttons.colVis.min.js"></script>
<style>
h1 {
    margin-top: 1em;
}
</style>
<div class="container box">
    <div class="jumbotron text-primary" style="padding: 1em; line-height: 1.5em;">
        <h1 id="main-title"><span class="fa fa-lock"></span>Loading...</h1>
        <div style="text-align: left">
            <div id="transcript">

            </div>
        </div>
    </div>
</div>
<script>
   function getBlockText(bkey,elementID) {
    var h2 = document.createElement("h1");
    $.get('/api/block/'+bkey, function(data) {
        if (data.displayTitle.trim() != "") {
            h2.innerHTML = data.displayTitle;
            document.getElementById(elementID).append(h2);
        }
        document.getElementById(elementID).insertAdjacentHTML( 'beforeend', data.body );
    });
   }
   function getComponentText(ckey,elementID) {
    var h2 = document.createElement("h1");
    $.get('/api/component/'+ckey, function(data) {
        //console.log(data);
        h2.innerHTML = data.displayTitle;
        document.getElementById(elementID).append(h2);
        document.getElementById(elementID).insertAdjacentHTML( 'beforeend', data.body );
        if (data.properties && !data.properties._feedback) {
            var instruction = document.createElement("p");
            instruction.innerHTML = data.properties.instruction;
            document.getElementById(elementID).append(instruction);
            if (data.properties._completionBody) {
                document.getElementById(elementID).insertAdjacentHTML( 'beforeend', data.properties._completionBody );
            }
            var list = document.createElement('ul');
            var appendList = false;
            try {
                (data.properties._items).forEach(item => {
                    if (item.title) {
                        var h3 = document.createElement('h3');
                        h3.innerHTML = item.title;
                        document.getElementById(elementID).append(h3);
                        if (item.body) {
                           document.getElementById(elementID).insertAdjacentHTML( 'beforeend', item.body );
                        }
                    } else {
                        appendList = true;
                        var option = document.createElement('li');
                        if (item.body) {
                            option.innerHTML = item.body;
                        }
                        if (item.text) {
                            option.innerHTML = item.text;
                        }
                        list.append(option);
                    }
                });
            } catch (err) {
                //console.log(err);
            }
            if (appendList) {
                document.getElementById(elementID).append(list);
            }
        }
        if (data.properties._feedback) {
            var instruction = document.createElement("p");
            instruction.innerHTML = data.properties.instruction;
            document.getElementById(elementID).append(instruction);
            var list = document.createElement('ul');
            (data.properties._items).forEach(item => {
                var option = document.createElement('li');
                if (item._shouldBeSelected) {
                    var bold = document.createElement('b');
                    bold.innerHTML = item.text;
                    option.append(bold);
                    list.append(option);
                } else {
                    option.innerHTML = item.text;
                    list.append(option);
                }
            });
            document.getElementById(elementID).append(list);
            document.getElementById(elementID).insertAdjacentHTML( 'beforeend', data.properties._feedback.correct );
            document.getElementById(elementID).insertAdjacentHTML( 'beforeend', data.properties._feedback._incorrect.final );
        }
    });
   }
   $(document).ready( function () {
        $.get('/api/contentObject/<%= id %>', function(data) {
            document.getElementById("main-title").innerHTML = data.title;
           // for (const [key, value] of Object.entries(data.articles)) {
           //     if (typeof value == "object") {
                    delete(data.articles.length);
                    var articles = Object.keys(data.articles).map((key) => data.articles[key]);
                    articles = articles.sort((a, b) => {
                        if (a.sortOrder < b.sortOrder) {
                            return -1;
                        }
                    });
                    for (var i=0;i<articles.length;i++) {
                        blocks = articles[i].blocks;
                        delete(blocks.length);
                        var blocks = Object.keys(blocks).map((key) => blocks[key]);
                        blocks = blocks.sort((a, b) => {
                            if (a.sortOrder < b.sortOrder) {
                                return -1;
                            }
                        });
                        for (var b=0;b<blocks.length;b++) {
                            bvalue = blocks[b];
                            var block = document.createElement('block');
                            block.setAttribute('id',"transcript-"+bvalue.id);
                            document.getElementById("transcript").append(block);
                            getBlockText(bvalue.id,"transcript-"+bvalue.id);
                            for (const [ckey, cvalue] of Object.entries(bvalue.components)) {
                                if (typeof cvalue == "object") {
                                    var block = document.createElement('block');
                                    block.setAttribute('id',"transcript-"+ckey);
                                    document.getElementById("transcript").append(block);
                                    getComponentText(ckey,"transcript-"+ckey);
                                }
                            }
                        }
                    }
                //}
            //}
        });
    });
</script>
<%- include('../partials/footer') %>
